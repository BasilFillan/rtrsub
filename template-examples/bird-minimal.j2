{#

Static RPKI based Origin Validatoin for BIRD

function reject_rpki_invalid() - no explicit arguments
    to be applied on each and every EBGP session

#}

roa table ROAS {
{%- for roa in roa_list %}
    roa {{ roa['p'] }} max {{ roa['m'] }} as {{ roa['o'] }};
{%- endfor -%}
}

function reject_rpki_invalid()
{
    if (roa_check(ROAS, net, bgp_path.last_nonaggregated) = ROA_VALID) then {
        /* add rfc8097 marker to routes for which a valid matching ROA exists */
        bgp_ext_community.add((unknown 0x4300, 0, 0));
    }
    else if (roa_check(ROAS, net, bgp_path.last_nonaggregated) = ROA_INVALID) then {
        print "Reject: RPKI ROA check failed for ", net, " ", bgp_path, " protocol: ", proto;
        bgp_ext_community.add((unknown 0x4300, 0, 2));
        reject;
    }
    else {
        /* add rfc8097 marker to routes for which no covering ROA exists */
        bgp_ext_community.add((unknown 0x4300, 0, 1));
    }
}
