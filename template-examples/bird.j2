function is_roa_covered_prefix()
prefix set roas;
{
     roas = [
        {% for prefix in pfx_dict -%}
{{ prefix }}+
{%- if not loop.last -%},{%- endif -%}
{%- if loop.index % 4 == 0 -%}
{{ "\n        " }}
{%- else -%}
{{ " " }}
{%- endif -%}
{%- endfor %}
    ];

    if net ~ roas then {
        return true;
    }
    else return false;
}

function complies_with_roa()
{
{%- for prefix in pfx_dict %}
    if net = {{ prefix }} then {
{%- for origin in pfx_dict[prefix]["origins"]|sort(reverse=True) %}
{%- if origin == 0 %}
        return false;
{%- else %}
        if bgp_path.last = {{ origin }} then return true;
{%- endif %}
{%- endfor %}
     }
{%- endfor %}
     return false;
}

function match_roa_{{ afi }}(int asn)
{%- for origin in origin_dict|sort() %}
prefix set AS{{ origin }};
{%- endfor %}
{
{%- for origin in origin_dict %}
    AS{{ origin }} = [
        {% for prefix in origin_dict[origin] -%}
{%- if origin_dict[origin][prefix]['length'] == origin_dict[origin][prefix]['maxlength'] -%}
{{ prefix }}
{%- else -%}
{{ prefix }}{{ "{" }}{{ origin_dict[origin][prefix]['length'] }},{{ origin_dict[origin][prefix]['maxlength'] }}{{ "}" }}
{%- endif -%}
{%- if not loop.last -%},{%- endif -%}
{%- if loop.index % 4 == 0 -%}
{{ "\n        " }}
{%- else -%}
{{ " " }}
{%- endif -%}
{%- endfor -%}
    ];
{% endfor %}
{%- for origin in origin_dict|sort() %}
    if (asn = {{ origin }} && net ~ AS{{ origin }}) then return true;
{%- endfor %}
    return false;
}

filter check_roa
{
    if is_roa_covered_prefix() then {
        if complies_with_roa() then {
            accept;
        }
        reject;
    }
}
