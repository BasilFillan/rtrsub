function is_roa_covered_prefix()
prefix set roas;
{
     roas = [
        <% for prefix in pfx_dict -%>
<%= prefix %>+
<%- if not loop.last -%>,<%- endif -%>
<%- if loop.index % 4 == 0 -%>
<%= "\n        " %>
<%- else -%>
<%= " " %>
<%- endif -%>
<%- endfor %>
    ];

    if net ~ roas then {
        return true;
    }
    else return false;
}

function complies_with_roa()
{
%% for prefix in pfx_dict
%%     if pfx_dict[prefix]["prefixlen"] == pfx_dict[prefix]["maxlength"]
    if net = <%= prefix %> then {
%% else
    if net ~ [ <%= prefix %>{<%= pfx_dict[prefix]["prefixlen"] %>,<%= pfx_dict[prefix]["maxlength"] %>} ] then {
%% endif
%%     for origin in pfx_dict[prefix]["origins"]|sort(reverse=True)
%%         if origin == 0
        return false;
%% else
        if bgp_path.last = <%= origin %> then return true;
%%         endif
%%     endfor
     }
%% endfor

     return false;
}

function reject_rpki_invalid()
{
    if is_roa_covered_prefix() then {
        if complies_with_roa() then {
            accept;
        }
        print "reject_rpk_invalid() protocol ", proto, " RPKI invalid prefix: ", net, " path: ", bgp_path;
        reject;
    }
}
